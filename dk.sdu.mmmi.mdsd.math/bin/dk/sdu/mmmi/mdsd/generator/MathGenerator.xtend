/*
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.generator

import dk.sdu.mmmi.mdsd.math.Div
import dk.sdu.mmmi.mdsd.math.Expression
import dk.sdu.mmmi.mdsd.math.Minus
import dk.sdu.mmmi.mdsd.math.Mult
import dk.sdu.mmmi.mdsd.math.Plus
import java.util.HashMap
import java.util.Map
import javax.swing.JOptionPane
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import dk.sdu.mmmi.mdsd.math.Num
import dk.sdu.mmmi.mdsd.math.Var
import dk.sdu.mmmi.mdsd.math.Let
import dk.sdu.mmmi.mdsd.math.MathExp

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MathGenerator extends AbstractGenerator {

	static Map<String, Integer> variables = new HashMap();
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val math = resource.allContents.filter(MathExp)
		
		val list = math.toList
		
		for (MathExp exp : list) {
			exp.compute
				
		}
		
		
		
		
		// You can replace with hovering, see Bettini Chapter 8
		displayPanel(variables)
	}
	
	//
	// Compute function: computes value of expression
	// Note: written according to illegal left-recursive grammar, requires fix
	//
	
	def static compute(MathExp math) { 
		
		variables.put(math.name, math.exp.computeExp(variables))
		return variables
	}
	
	def static int computeExp(Expression exp, Map<String, Integer> map) {
		switch exp {
			Plus: exp.left.computeExp(map) + exp.right.computeExp(map)
			Minus: exp.left.computeExp(map) - exp.right.computeExp(map)
			Mult: exp.left.computeExp(map) * exp.right.computeExp(map)
			Div: exp.left.computeExp(map) / exp.right.computeExp(map)
			Var: map.get(exp.ref.name)
			Num: exp.value
			Let: exp.body.computeExp(map.bind(exp.id, exp.binding.computeExp(map)))
			default: throw new Error("Expression is not accepted")
		}

	}
	
	def static Map<String, Integer> bind(Map<String, Integer> map1, String name, int value) {
		variables.put(name, value)
		variables
	}

	def void displayPanel(Map<String, Integer> result) {
		var resultString = ""
		for (entry : result.entrySet()) {
         	resultString += "var " + entry.getKey() + " = " + entry.getValue() + "\n"
        }
		
		JOptionPane.showMessageDialog(null, resultString ,"Math Language", JOptionPane.INFORMATION_MESSAGE)
	}

}
